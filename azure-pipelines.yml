pool:
  vmImage: 'ubuntu-latest'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.7'
  displayName: 'Use Python 3.7'

- script: |
    pip3 install -U pip setuptools
    pip3 install -r requirements_dev.txt -r requirements.txt . git+https://github.com/Abstract-Tech/pytest-azurepipelines.git
  displayName: 'Install derex.runner'

- script: nohup ddc pull &
  displayName: 'Pull edX image in background'

- script: |
    set -ex
    set -o pipefail
    cd tests
    pytest --ignore-docstrings |grep -v codecoveragetool=Cobertura
  displayName: 'Run python tests'

- script: |
    # We installed the package with pip, and coverage reports the full absolute path.
    # We cut to derex/runner/etc/etc
    DEREX_RUNNER_PATH=`cd tests;python -c "from pathlib import Path; import derex.runner;print(Path(derex.runner.__file__).parent.parent.parent)"`
    echo Replacing ${DEREX_RUNNER_PATH} in tests/htmlcov/*.html
    grep "${DEREX_RUNNER_PATH}" tests/htmlcov/*.html
    sed -i -e "s|${DEREX_RUNNER_PATH}||" tests/htmlcov/*.html
    npm install juice
    # Azure pipelines strips style sheets but leaves styles in place.
    # juice can embed the styles in the HTML for us and present a much better
    # view in the coverage results tab.
    for filename in tests/htmlcov/*.html; do $(npm bin)/juice $filename $filename; done
    echo "##vso[codecoverage.publish codecoveragetool=Cobertura;summaryfile=${PWD}/tests/test-cov.xml;reportdirectory=${PWD}/tests/htmlcov;]"
  displayName: Fix coverage result and publish it
  condition: succeededOrFailed()

- script: |
    set -ex
    export DEREX_ADMIN_SERVICES=False
    ddc up -d
    ddc --reset-mailslurper
  displayName: 'Start service daemons'

- script: cd tests/fixtures/minimal; ddc-local up -d
  displayName: 'Start edX daemons'

- script: cd tests/fixtures/minimal; ddc-local --reset-mysql
  displayName: 'Prime mysql database'

- script: docker run --network derex -v $(pwd)/nginx.conf:/etc/nginx/conf.d/default.conf -p 80:80 -d --rm nginx:1.17.0-alpine
  displayName: 'Start nginx to expose LMS/CMS on the same domain/port'

- script: |
    ddc logs
    echo 127.0.0.1 localhost studio.localhost | sudo tee -a /etc/hosts
    sleep 3  # Give the services a little time to start up
  displayName: Add studio.localhost to /etc/hosts

- script: curl http://localhost:4700/
  displayName: 'Curl the LMS'

- script: curl http://studio.localhost:4800/
  displayName: 'Curl the CMS'
