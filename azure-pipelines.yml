pool:
  vmImage: 'ubuntu-latest'

steps:
- script: |
    set -ex
    docker network create -d bridge derex
    docker-compose -f derex/runner/templates/docker-compose.yml up -d
    docker-compose -f derex/runner/templates/docker-compose.yml logs
    sleep 5
    docker-compose -f derex/runner/templates/docker-compose.yml logs
    sleep 5
    docker-compose -f derex/runner/templates/docker-compose.yml logs
  displayName: 'Start daemons'

- script: docker run --network derex --rm derex/openedx-ironwood:latest restore_dump.py
  displayName: 'Prime mysql database'

- script: docker run --name derex_lms -d --network derex --rm derex/openedx-ironwood:latest sh -c 'gunicorn --name ${SERVICE_VARIANT} --bind=0.0.0.0:8000 --max-requests=1000 wsgi:application'
  displayName: 'Start lms'

- script: docker run --name derex_cms -e SERVICE_VARIANT=cms -d --network derex --rm derex/openedx-ironwood:latest sh -c 'gunicorn --name ${SERVICE_VARIANT} --bind=0.0.0.0:8000 --max-requests=1000 wsgi:application'
  displayName: 'Start cms'

- script: docker run -e C_FORCE_ROOT=True --name derex_lms_worker -d --network derex --rm derex/openedx-ironwood:latest sh -c './manage.py lms celery worker --loglevel=info --hostname=edx.lms.core.default --maxtasksperchild 100'
  displayName: 'Start lms worker'

- script: docker run --network derex -v $(pwd)/nginx.conf:/etc/nginx/conf.d/default.conf -p 80:80 -d --rm nginx:1.17.0-alpine
  displayName: 'Start nginx'

- script: |
    echo 127.0.0.1 localhost studio.localhost | sudo tee -a /etc/hosts
    sleep 3  # Give the services a little time to start up
  displayName: Add studio.localhost to /etc/hosts

- script: curl http://localhost/
  displayName: 'Curl the LMS'

- script: curl http://studio.localhost/
  displayName: 'Curl the CMS'
