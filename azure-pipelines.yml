schedules:
- cron: "30 16 * * *"
  displayName: Daily build
  branches:
    include:
      - master
  always: true

jobs:
- job: RunPytests
  timeoutInMinutes: 40
  pool:
    vmImage: 'ubuntu-latest'
  steps:
    - template: azure-pipelines/prepare.yml

    - script: |
        set -ex
        set -o pipefail
        cd tests
        pytest -m "not slowtest" --ignore-docstrings |grep -v codecoveragetool=Cobertura
      displayName: 'Run python tests'

    - script: |
        # We installed the package with pip, and coverage reports the full absolute path.
        # We cut to derex/runner/etc/etc
        DEREX_RUNNER_PATH=`cd tests;python -c "from pathlib import Path; import derex.runner;print(Path(derex.runner.__file__).parent.parent.parent)"`
        echo Replacing ${DEREX_RUNNER_PATH} in tests/htmlcov/*.html
        grep "${DEREX_RUNNER_PATH}" tests/htmlcov/*.html
        sed -i -e "s|${DEREX_RUNNER_PATH}||" tests/htmlcov/*.html
        npm install juice
        # Azure pipelines strips style sheets but leaves styles in place.
        # juice can embed the styles in the HTML for us and present a much better
        # view in the coverage results tab.
        for filename in tests/htmlcov/*.html; do $(npm bin)/juice $filename $filename; done
        echo "##vso[codecoverage.publish codecoveragetool=Cobertura;summaryfile=${PWD}/tests/test-cov.xml;reportdirectory=${PWD}/tests/htmlcov;]"
      displayName: Fix coverage result and publish it
      condition: succeededOrFailed()


- job: RunSlowPytests
  timeoutInMinutes: 40
  pool:
    vmImage: 'ubuntu-latest'
  steps:
    - template: azure-pipelines/prepare.yml

    - script: ddc-services pull
      displayName: 'Pull edX services images'

    - script: |
        set -ex
        export DEREX_ADMIN_SERVICES=False
        ddc-services up -d
        derex reset-mailslurper
      displayName: 'Start service daemons'

    - script: |
        # Slow tests do not currently contribute to coverage
        set -ex
        set -o pipefail
        cd tests
        pytest -m "slowtest" --ignore-docstrings |grep -v codecoveragetool=Cobertura
      displayName: 'Run python tests'


- job: TestComplete
  timeoutInMinutes: 40
  pool:
    vmImage: 'ubuntu-latest'
  steps:
    - template: azure-pipelines/prepare.yml

    - script: ddc-services pull
      displayName: 'Pull edX services images'

    - script: |
        set -ex
        export DEREX_ADMIN_SERVICES=False
        ddc-services up -d
        derex reset-mailslurper
      displayName: 'Start service daemons'

    - script: |
        set -ex
        cd tests/fixtures/complete
        # Invoking ddc-project will trigger an image build
        ddc-project config
      displayName: 'Build image for project "complete"'

    - script: |
        set -ex
        cd tests/fixtures/complete
        derex reset-mysql
        derex reset-rabbitmq
        ddc-services exec -T mysql mysql -h localhost --protocol tcp -u root -psecret complete_myedx -e "SELECT * from auth_user WHERE username='derex.runner'"|grep derex.runner
      displayName: 'Test complete project fixtures'

    - script: cd tests/fixtures/complete; ddc-project up -d
      displayName: 'Start edX daemons'

    - script: docker run --network derex -v $(pwd)/nginx.conf:/etc/nginx/conf.d/default.conf -p 80:80 -d --rm nginx:1.17.0-alpine
      displayName: 'Start nginx to expose LMS/CMS on the same domain/port'

    - script: |
        echo 127.0.0.1 localhost studio.localhost | sudo tee -a /etc/hosts
        sleep 3  # Give the services a little time to start up
      displayName: Add studio.localhost to /etc/hosts

    - script: curl -f http://localhost:4700/ || (sleep 10; curl -f http://localhost:4700/ )
      displayName: 'Curl the LMS'

    - script: curl -f http://studio.localhost:4800/ || (sleep 10; curl -f http://studio.localhost:4800/ )
      displayName: 'Curl the CMS'

    - script: |
        set -ex
        cd tests/fixtures/complete
        derex build-final-refresh
        docker images
        # This should not be needed, but for some reason Azure does not tag the image
        docker tag $(docker images -q|head -n1) complete/openedx-themes
        docker images

        echo Installing dive
        wget -q https://github.com/wagoodman/dive/releases/download/v0.8.0/dive_0.8.0_linux_amd64.deb
        DEBIAN_FRONTEND=noninteractive sudo -E apt-get install -y ./dive_0.8.0_linux_amd64.deb
        echo Analyzing image
        dive --ci complete/openedx-themes
      condition: always()
      displayName: 'Build the complete image and test it with dive'
      continueOnError: true  # Do not make the build fail because of this step, for now
      timeoutInMinutes: 40

    - script: |
        cd tests/fixtures/complete; derex build-themes; ddc-project up -d lms_final cms_final
        sleep 5  # Give it time to start up
      displayName: 'Start final image lms/cms'

    - script: curl --connect-timeout 30 --retry 5 --retry-delay 5 -f http://localhost:4710/ || (sleep 10; curl -f http://localhost:4710/ )
      continueOnError: true  # Temporarily disable this test: it's failing with this line in the logs:
      # pymongo.errors.OperationFailure: command SON([('saslStart', 1), ('mechanism', 'SCRAM-SHA-1'), ('autoAuthorize', 1), ('payload', Binary(b'n,,n=edxapp,r=MDg3MjIwMjQyMDc4MTg3MjQ=', 0))]) on namespace complete_mongoedx.$cmd failed: Authentication failed.
      displayName: 'Curl the final LMS'

    - script: curl --connect-timeout 30 --retry 5 --retry-delay 5 -f http://studio.localhost:4810/ || (sleep 10; curl -f http://studio.localhost:4810/ )
      continueOnError: true  # Temporarily disable this test: it's failing with the line mentioned above
      displayName: 'Curl the final CMS'

    - script: |
        ddc-services logs
        cd tests/fixtures/complete; ddc-project logs
      condition: always()
      displayName: 'Show logs'

    - script: |
        cd tests/fixtures/complete; ddc-project config
      condition: always()
      displayName: 'Show ddc-project config'


- job: TestMinimal
  timeoutInMinutes: 40
  pool:
    vmImage: 'ubuntu-latest'
  steps:
    - template: azure-pipelines/prepare.yml

    - script: ddc-services pull
      displayName: 'Pull edX services images'

    - script: |
        set -ex
        export DEREX_ADMIN_SERVICES=False
        ddc-services up -d
        derex reset-mailslurper
      displayName: 'Start service daemons'

    - script: |
        set -ex
        cd tests/fixtures/minimal
        ddc-project pull
      displayName: 'Pull edx image'

    - script: |
        set -ex
        cd tests/fixtures/minimal
        derex reset-mysql
        derex reset-rabbitmq
      displayName: 'Prime Mysql DB'


- job: CheckDocs
  timeoutInMinutes: 40
  pool:
    vmImage: 'ubuntu-latest'
  steps:
    - template: azure-pipelines/prepare.yml
    - script: make docs
      displayName: 'Compile docs'
