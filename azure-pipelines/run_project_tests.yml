parameters:
  - name: PROJECT_TYPE
    type: string
  - name: PROJECT_PATH
    type: string
  - name: PROJECT_NAME
    type: string

steps:
  - script: |
      set -ex
      cd ${{ parameters.PROJECT_PATH }}
      ddc-project up -d
      sleep 5  # Give it time to start up
    displayName: "Start project services in debug runmode"

  - script: |
      cd ${{ parameters.PROJECT_PATH }}
      ddc-project config
      ddc-project logs
    condition: always()
    displayName: "Show logs (debug runmode)"

  - script: |
      set -ex
      cd ${{ parameters.PROJECT_PATH }}
      # Run a command to get the current database name. First run it with all output enabled
      # so that in case of errors in the pipeline we have info about what went wrong
      ddc-project exec -T lms sh -c 'echo '"'"'from django.conf import settings; print(settings.DATABASES["default"]["NAME"])'"'"' |./manage.py lms shell'
      # ...and then the actual run
      DATABASE_NAME=$(ddc-project exec -T lms sh -c 'echo '"'"'from django.conf import settings; print(settings.DATABASES["default"]["NAME"])'"'"' |./manage.py lms shell 2> /dev/null' 2> /dev/null)
      ddc-services exec -T mysql mysql -h localhost --protocol tcp -u root -p$(derex debug print-secret mysql) ${DATABASE_NAME} -e "SELECT * from auth_user WHERE username='derex.runner'"|grep derex.runner
    condition: eq('${{ parameters.PROJECT_TYPE }}', 'complete')
    displayName: "Test ${{ parameters.PROJECT_NAME }} project fixtures"

  - script: $(CURL) http://${{ parameters.PROJECT_NAME }}.localhost
    displayName: Curl the LMS (debug runmode)

  - script: $(CURL) http://${{ parameters.PROJECT_NAME }}.localhost/example_view
    displayName: Curl the LMS example plugin view (debug runmode)
    condition: eq('${{ parameters.PROJECT_TYPE }}', 'complete')

  - script: $(CURL) http://studio.${{ parameters.PROJECT_NAME }}.localhost
    displayName: Curl the CMS (debug runmode)

  - script: |
      set -ex
      cd ${{ parameters.PROJECT_PATH }}
      derex runmode production --force
      ddc-project up -d
      sleep 5  # Give it time to start up
    displayName: "Start project services in production runmode"

  - script: |
      cd ${{ parameters.PROJECT_PATH }}
      ddc-project config
      ddc-project logs
    condition: always()
    displayName: "Show logs (production runmode)"

  - script: |
      $(CURL) http://${{ parameters.PROJECT_NAME }}.localhost/ || (sleep 10; $(CURL) http://${{ parameters.PROJECT_NAME }}.localhost/)
    displayName: "Curl the LMS (production runmode)"

  - script: $(CURL) http://${{ parameters.PROJECT_NAME }}.localhost/example_view
    displayName: "Curl the LMS example plugin view (production runmode)"
    condition: eq('${{ parameters.PROJECT_TYPE }}', 'complete')

  - script: $(CURL) http://studio.${{ parameters.PROJECT_NAME }}.localhost/ || (sleep 10; $(CURL) http://studio.${{ parameters.PROJECT_NAME }}.localhost/)
    displayName: "Curl the CMS (production runmode)"

  - script: |
      set -ex
      $(CURL) http://${{ parameters.PROJECT_NAME }}.localhost/|grep static/demo-theme/css/lms-main-v1.css
      $(CURL) http://${{ parameters.PROJECT_NAME }}.localhost/static/demo-theme/css/lms-main-v1.css | grep this_is_a_customized_theme -q
    condition: eq('${{ parameters.PROJECT_TYPE }}', 'complete')
    displayName: "Curl the LMS CSS and make sure our theme CSS is in"

  - script: |
      set -x
      cd ${{ parameters.PROJECT_PATH }}
      echo 127.0.0.1 localhost flower.${{ parameters.PROJECT_NAME }}.localhost | sudo tee -a /etc/hosts
      while ! (ddc-project logs cms_worker|grep ready); do sleep 1; done
      while ! (ddc-project logs lms_worker|grep ready); do sleep 1; done
      curl -m10 --retry-connrefused --connect-timeout 30 --retry 5 --retry-delay 5 http://flower.${{ parameters.PROJECT_NAME }}.localhost/dashboard?json=1|grep celery@openedx.lms
      curl -m10 --retry-connrefused --connect-timeout 30 --retry 5 --retry-delay 5 http://flower.${{ parameters.PROJECT_NAME }}.localhost/dashboard?json=1|grep celery@openedx.cms
    displayName: "Check flower"

  - script: |
      # This test is relying on the djcelery fixtures which should
      # have been loaded into the database when priming mysql
      set -ex
      cd ${{ parameters.PROJECT_PATH }}
      CELERYBEAT_RESULT=$(ddc-project logs celerybeat | grep "Scheduler: Sending due task debug" -c)
      WORKER_RESULT=$(ddc-project logs lms_worker | grep "pong" -c)
      if [ $CELERYBEAT_RESULT -gt 0 ] && [ $WORKER_RESULT -gt 0 ]; then
          exit 0
      fi
      exit 1
    condition: eq('${{ parameters.PROJECT_TYPE }}', 'complete')
    displayName: "Check celerybeat"

  - script: |
      set -ex
      cd ${{ parameters.PROJECT_PATH }}/e2e && npm ci && cd ..
      derex test e2e
    condition: eq('${{ parameters.PROJECT_TYPE }}', 'complete')
    displayName: "Run project e2e tests"

  - script: |
      ddc-services logs
      cd ${{ parameters.PROJECT_PATH }}; ddc-project logs
    condition: always()
    displayName: "Show services and project logs"
