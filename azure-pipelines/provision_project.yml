parameters:
  - name: PROJECT_TYPE
    type: string
  - name: PROJECT_PATH
    type: string
  - name: PROJECT_NAME
    type: string

steps:
  - script: |
      cd ${{ parameters.PROJECT_PATH }}; ddc-project config
    condition: always()
    displayName: "Show ddc-project config"

  - script: cd ${{ parameters.PROJECT_PATH }} && derex build project
    condition: eq('${{ parameters.PROJECT_TYPE }}', 'complete')
    displayName: Build project final image

  - script: |
      set -ex
      cd ${{ parameters.PROJECT_PATH }}
      derex mysql reset --force
    displayName: "Prime Mysql DB"

  - script: |
      set -ex
      cd ${{ parameters.PROJECT_PATH }}
      derex minio-update-key
      derex create-bucket --no-tty
    displayName: "Prime MinIO bucket"

  - script: |
      set -ex
      cd ${{ parameters.PROJECT_PATH }}
      derex reset-rabbitmq
    displayName: "Prime Rabbitmq"

  - script: echo 127.0.0.1 localhost studio.${{ parameters.PROJECT_NAME }}.localhost.derex ${{ parameters.PROJECT_NAME }}.localhost.derex | sudo tee -a /etc/hosts
    displayName: Add studio.${{ parameters.PROJECT_NAME }}.localhost.derex and ${{ parameters.PROJECT_NAME }}.localhost.derex to /etc/hosts

  - script: cd ${{ parameters.PROJECT_PATH }}; ddc-project logs lms cms
    condition: always()
    displayName: Show LMS/CMS logs

  - script: cd ${{ parameters.PROJECT_PATH }} && derex settings production
    condition: eq('${{ parameters.PROJECT_TYPE }}', 'complete')
    displayName: Set production settings

  - script: cd ${{ parameters.PROJECT_PATH }} && derex compile-theme
    condition: eq('${{ parameters.PROJECT_TYPE }}', 'complete')
    displayName: Compile theme

  # XXX: Work to have an efficient docker image and re-enable dive checks
  - script: |
      set -ex
      cd ${{ parameters.PROJECT_PATH }}
      docker images

      # This should not be needed, but for some reason Azure does not tag the image
      docker tag $(docker images -q|head -n1) ${{ parameters.PROJECT_NAME }}/openedx-themes
      docker images

      echo Installing dive
      wget -q https://github.com/wagoodman/dive/releases/download/v0.9.2/dive_0.9.2_linux_amd64.deb
      DEBIAN_FRONTEND=noninteractive sudo -E apt-get install -y ./dive_0.9.2_linux_amd64.deb

      echo Analyzing image
      # dive --ci ${{ parameters.PROJECT_NAME }}/openedx-themes
      echo "Skipping image analysis"
    condition: always()
    displayName: Test the ${{ parameters.PROJECT_NAME }} image with dive
    timeoutInMinutes: 40
