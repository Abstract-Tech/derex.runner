parameters:
  - name: OPENEDX_RELEASE
    type: string

steps:
  - script: ddc-services pull
    displayName: "Pull edX services images"

  - script: |
      set -ex
      export DEREX_ADMIN_SERVICES=False
      ddc-services up -d
      derex reset-mailslurper
    displayName: "Start service daemons"

  - script: |
      set -ex
      cd examples/${{ parameters.OPENEDX_RELEASE }}/complete
      derex mysql reset --force
      derex reset-rabbitmq
      derex create-bucket
      # Run a command to get the current database name. First run it with all output enabled
      # so that in case of errors in the pipeline we have info about what went wrong
      # We use the flower container because it always uses the base image regardless
      # of requirements and themes
      ddc-project run --rm flower sh -c 'echo '"'"'from django.conf import settings; print(settings.DATABASES["default"]["NAME"])'"'"' |./manage.py lms shell'
      # ...and then the actual run
      DATABASE_NAME=$(ddc-project run --rm flower sh -c 'echo '"'"'from django.conf import settings; print(settings.DATABASES["default"]["NAME"])'"'"' |./manage.py lms shell 2> /dev/null' 2> /dev/null)
      ddc-services exec -T mysql mysql -h localhost --protocol tcp -u root -psecret ${DATABASE_NAME} -e "SELECT * from auth_user WHERE username='derex.runner'"|grep derex.runner
    displayName: "Test ${{ parameters.OPENEDX_RELEASE }} complete project fixtures"

  - script: cd examples/${{ parameters.OPENEDX_RELEASE }}/complete && derex build requirements
    displayName: 'Build requirements image for project "complete"'

  - script: cd examples/${{ parameters.OPENEDX_RELEASE }}/complete; ddc-project up -d; sleep 3
    displayName: "Start edX daemons"

  - script: echo 127.0.0.1 localhost studio.${{ parameters.OPENEDX_RELEASE }}-complete.localhost ${{ parameters.OPENEDX_RELEASE }}-complete.localhost | sudo tee -a /etc/hosts
    displayName: Add studio.${{ parameters.OPENEDX_RELEASE }}-complete.localhost and ${{ parameters.OPENEDX_RELEASE }}-complete.localhost to /etc/hosts

  - script: cd examples/${{ parameters.OPENEDX_RELEASE }}/complete; ddc-project logs cms lms
    condition: always()
    displayName: Show CMS/LMS logs

  - script: |
      $(CURL) http://${{ parameters.OPENEDX_RELEASE }}-complete.localhost/ || (sleep 10; $(CURL) http://${{ parameters.OPENEDX_RELEASE }}-complete.localhost/)
      $(CURL) http://${{ parameters.OPENEDX_RELEASE }}-complete.localhost/example_view
    displayName: Curl the LMS

  - script: $(CURL) http://studio.${{ parameters.OPENEDX_RELEASE }}-complete.localhost/ || (sleep 10; $(CURL) http://studio.${{ parameters.OPENEDX_RELEASE }}-complete.localhost/)
    displayName: Curl the CMS

  - script: cd examples/${{ parameters.OPENEDX_RELEASE }}/complete && derex compile-theme
    displayName: Compile theme

  - script: cd examples/${{ parameters.OPENEDX_RELEASE }}/complete && derex build final
    displayName: Build final image

  - script: |
      set -ex
      cd examples/${{ parameters.OPENEDX_RELEASE }}/complete
      docker images
      # This should not be needed, but for some reason Azure does not tag the image
      docker tag $(docker images -q|head -n1) complete/openedx-themes
      docker images

      echo Installing dive
      wget -q https://github.com/wagoodman/dive/releases/download/v0.9.2/dive_0.9.2_linux_amd64.deb
      DEBIAN_FRONTEND=noninteractive sudo -E apt-get install -y ./dive_0.9.2_linux_amd64.deb
      echo Analyzing image
      dive --ci complete/openedx-themes
    condition: always()
    displayName: Test the complete image with dive
    continueOnError: true # Do not make the build fail because of this step, for now
    timeoutInMinutes: 40

  - script: |
      set -ex
      cd examples/${{ parameters.OPENEDX_RELEASE }}/complete
      derex runmode production --force
      ddc-project up -d
      sleep 5  # Give it time to start up
    displayName: "Start production image lms/cms"

  - script: |
      cd examples/${{ parameters.OPENEDX_RELEASE }}/complete
      ddc-project config
      ddc-project logs cms lms
    condition: always()
    displayName: "Show CMS/LMS logs (prod mode)"

  - script: |
      $(CURL) http://${{ parameters.OPENEDX_RELEASE }}-complete.localhost/ || (sleep 10; $(CURL) http://${{ parameters.OPENEDX_RELEASE }}-complete.localhost/)
      $(CURL) http://${{ parameters.OPENEDX_RELEASE }}-complete.localhost/example_view
    displayName: "Curl the LMS (prod mode)"

  - script: $(CURL) http://studio.${{ parameters.OPENEDX_RELEASE }}-complete.localhost/ || (sleep 10; $(CURL) http://studio.${{ parameters.OPENEDX_RELEASE }}-complete.localhost/)
    displayName: "Curl the CMS (prod mode)"

  - script: |
      set -ex
      $(CURL) http://${{ parameters.OPENEDX_RELEASE }}-complete.localhost/|grep static/demo-theme/css/lms-main-v1.css
      $(CURL) http://${{ parameters.OPENEDX_RELEASE }}-complete.localhost/static/demo-theme/css/lms-main-v1.css | grep this_is_a_customized_theme -q
    displayName: "Curl the LMS CSS and make sure our theme CSS is in"

  - script: |
      ddc-services logs
      cd examples/${{ parameters.OPENEDX_RELEASE }}/complete; ddc-project logs
    condition: always()
    displayName: "Show logs"

  - script: |
      cd examples/${{ parameters.OPENEDX_RELEASE }}/complete; ddc-project config
    condition: always()
    displayName: "Show ddc-project config"
