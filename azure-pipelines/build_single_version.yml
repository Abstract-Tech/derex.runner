steps:
  # restore the docker cache based on the Dockerfile
  - task: Cache@2
    inputs:
      key: $(CACHE_KEY_EXACT)
      path: '$(LAYERS_CACHE_DIR)'
      cacheHitVar: 'BuildKitLayersHit'
      restoreKeys: $(CACHE_KEY_FALLBACK)
    displayName: 'Docker layers cache'

  - script: |
      if [ -d "$(LAYERS_CACHE_DIR)" ]; then
        echo "Will use cached layers from $(LAYERS_CACHE_DIR)"
        find $(LAYERS_CACHE_DIR)
        DOCKER_COMMAND="$DOCKER_COMMAND --cache-from=type=local,src=$(LAYERS_CACHE_DIR)"
      else
        mkdir ${LAYERS_CACHE_DIR}
      fi
      if [ "$(BuildKitLayersHit)" != "true" ]; then
        echo "Will store cached layers to $(LAYERS_CACHE_DIR)"
        DOCKER_COMMAND="$DOCKER_COMMAND --cache-to=type=local,dest=$(LAYERS_CACHE_DIR)"
      fi
      echo  "##vso[task.setvariable variable=DOCKER_COMMAND]${DOCKER_COMMAND}"
    displayName: 'Setup docker layers cache'

  - script: |
      set -ex
      sudo apt-get remove moby-cli -y
      curl -fsSL https://get.docker.com |sudo bash
      sudo mv /etc/docker/daemon.json /etc/docker/daemon.json.orig
      sudo cat /etc/docker/daemon.json.orig|jq '. + {experimental: true}' |sudo tee /etc/docker/daemon.json
      sudo systemctl restart docker.service
      docker version
      docker buildx create --use
    displayName: Replace Microsoft docker with upsream docker and create build context

  - script: docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}
    displayName: 'Log into docker registry'
    env:
      DOCKER_USERNAME: $(DOCKER_USERNAME)
      DOCKER_PASSWORD: $(DOCKER_PASSWORD)

  - script: ${DOCKER_COMMAND} ${DOCKER_OPTS} --output type=oci,dest=$(System.DefaultWorkingDirectory)/edx-${DOCKER_IMAGES_SLUG}-nostatic.tar --target=nostatic
    displayName: Build/push nostatic image

  - script: ${DOCKER_COMMAND} ${DOCKER_OPTS} --output type=oci,dest=$(System.DefaultWorkingDirectory)/edx-${DOCKER_IMAGES_SLUG}-dev.tar --target=dev
    displayName: Build/push dev image

  - publish: $(System.DefaultWorkingDirectory)/edx-$(DOCKER_IMAGES_SLUG)-nostatic.tar
    artifact: $(DOCKER_IMAGES_SLUG)_image_nostatic

  - publish: $(System.DefaultWorkingDirectory)/edx-$(DOCKER_IMAGES_SLUG)-dev.tar
    artifact: $(DOCKER_IMAGES_SLUG)_image_dev
