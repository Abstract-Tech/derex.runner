steps:
  # Sentinel cache: if this one hits, it means the image cache will hit too
  # We don't use the image cache for performance reasons
  - task: Cache@2
    inputs:
      key: SENTINEL=1 | $(CACHE_KEY_IMAGES)
      path: $(SENTINEL_CACHE_PATH)
      cacheHitVar: 'ImagesSentinelHit'
    displayName: 'Docker images sentinel cache'

  - task: Cache@2
    inputs:
      key: $(CACHE_KEY_IMAGES)
      path: $(IMAGE_CACHE_PATH)
      cacheHitVar: 'ImagesHit'
    condition: ne(variables.ImagesSentinelHit, 'true')
    displayName: 'Docker images cache'

  # restore the docker cache based on the Dockerfile
  - task: Cache@2
    inputs:
      key: $(CACHE_KEY_EXACT)
      path: '$(LAYERS_CACHE_DIR)'
      cacheHitVar: 'BuildKitLayersHit'
      restoreKeys: $(CACHE_KEY_FALLBACK)
    condition: ne(variables.ImagesSentinelHit, 'true')
    displayName: 'Docker layers cache'

  - script: |
      if [ -d "$(LAYERS_CACHE_DIR)" ]; then
        echo "Will use cached layers from $(LAYERS_CACHE_DIR)"
        find $(LAYERS_CACHE_DIR)
        DOCKER_COMMAND="$DOCKER_COMMAND --cache-from=type=local,src=$(LAYERS_CACHE_DIR)"
      else
        mkdir ${LAYERS_CACHE_DIR}
      fi
      if [ "$(BuildKitLayersHit)" != "true" ]; then
        echo "Will store cached layers to $(LAYERS_CACHE_DIR)"
        DOCKER_COMMAND="$DOCKER_COMMAND --cache-to=type=local,dest=$(LAYERS_CACHE_DIR)"
      fi
      echo  "##vso[task.setvariable variable=DOCKER_COMMAND]${DOCKER_COMMAND}"
      mkdir $(SENTINEL_CACHE_PATH)
      mkdir $(IMAGE_CACHE_PATH)
      cp -r $(CACHE_KEY_FILES) $(SENTINEL_CACHE_PATH)
    condition: ne(variables.ImagesSentinelHit, 'true')
    displayName: 'Setup docker layers cache'

  - script: |
      set -ex
      sudo apt-get remove moby-cli -y
      curl -fsSL https://get.docker.com |sudo bash
      sudo mv /etc/docker/daemon.json /etc/docker/daemon.json.orig
      sudo cat /etc/docker/daemon.json.orig|jq '. + {experimental: true}' |sudo tee /etc/docker/daemon.json
      sudo systemctl restart docker.service
      docker version
      docker buildx create --use
    condition: ne(variables.ImagesSentinelHit, 'true')
    displayName: Replace Microsoft docker with upsream docker and create build context

  - script: ${DOCKER_COMMAND} ${DOCKER_OPTS} --load -t derex/edx-${DOCKER_IMAGES_SLUG}-nostatic --target=nostatic
    condition: ne(variables.ImagesSentinelHit, 'true')
    displayName: Build nostatic image

  - script: ${DOCKER_COMMAND} ${DOCKER_OPTS} --load -t derex/edx-${DOCKER_IMAGES_SLUG}-dev --target=dev
    condition: ne(variables.ImagesSentinelHit, 'true')
    displayName: Build dev image

  - script: sudo apt-get install pxz -y
    condition: ne(variables.ImagesSentinelHit, 'true')
    displayName: Install pxz

  - script: docker save derex/edx-${DOCKER_IMAGES_SLUG}-dev derex/edx-${DOCKER_IMAGES_SLUG}-nostatic | pxz -5 -z > $(IMAGE_CACHE_PATH)/edx-$(DOCKER_IMAGES_SLUG).tar.xz
    condition: ne(variables.ImagesSentinelHit, 'true')
    displayName: Save docker images into image cache
