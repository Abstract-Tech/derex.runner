stages:
  - stage: Test
    variables:
      PYTEST_ADDOPTS: --cov=derex --cov-report xml --cov-report html --cov-report term --cov-report term-missing --cov-branch --black
    jobs:
      - job: PyInstallerBuildLinux
        pool:
          vmImage: $(UBUNTU_VERSION)
        steps:
          - template: prepare.yml
          - template: test_pyinstaller.yml
            parameters:
              OS: ubuntu
              OPENEDX_RELEASE: juniper
          - template: test_pyinstaller.yml
            parameters:
              OS: ubuntu
              OPENEDX_RELEASE: koa
          - template: test_pyinstaller.yml
            parameters:
              OS: ubuntu
              OPENEDX_RELEASE: lilac

      - job: PyInstallerBuildMacOs
        pool:
          vmImage: "macOS-10.15"
        steps:
          - template: prepare.yml
          - template: test_pyinstaller.yml
            parameters:
              OS: macos
              OPENEDX_RELEASE: juniper
          - template: test_pyinstaller.yml
            parameters:
              OS: macos
              OPENEDX_RELEASE: koa
          - template: test_pyinstaller.yml
            parameters:
              OS: macos
              OPENEDX_RELEASE: lilac

      - job: RunPytests
        timeoutInMinutes: 40
        pool:
          vmImage: $(UBUNTU_VERSION)
        steps:
          - template: prepare.yml

          - script: |
              set -ex
              set -o pipefail
              pip3 --cache-dir $(Pipeline.Workspace)/.cache/pip install scrypt
              cd tests
              pytest -m "not slowtest" --ignore-docstrings |grep -v codecoveragetool=Cobertura
            displayName: "Run python tests"

          - publish: $(System.DefaultWorkingDirectory)/tests/.coverage
            artifact: fasttests_coverage

      - job: RunSlowPytests
        timeoutInMinutes: 40
        pool:
          vmImage: $(UBUNTU_VERSION)
        steps:
          - template: prepare.yml
          - template: load_images.yml
            parameters:
              DOCKER_IMAGES_SLUG: juniper
          - template: load_images.yml
            parameters:
              DOCKER_IMAGES_SLUG: koa
          - template: load_images.yml
            parameters:
              DOCKER_IMAGES_SLUG: lilac
          - template: provision_services.yml

          - script: |
              set -ex
              set -o pipefail
              cd tests
              pytest -m "slowtest" --ignore-docstrings |grep -v codecoveragetool=Cobertura
            displayName: "Run python tests"

          - publish: $(System.DefaultWorkingDirectory)/tests/.coverage
            artifact: slowtests_coverage

      - job: CombineCoverage
        dependsOn:
          - RunPytests
          - RunSlowPytests
        pool:
          vmImage: $(UBUNTU_VERSION)
        steps:
          - template: prepare.yml

          - download: current

          - task: Cache@2
            inputs:
              key: npmcache2
              path: $(Pipeline.Workspace)/.cache/npm
            displayName: Cache npm packages

          - script: |
              set -ex
              cp $(Pipeline.Workspace)/slowtests_coverage/.coverage tests/.coverage.slow
              cp $(Pipeline.Workspace)/fasttests_coverage/.coverage tests/.coverage.fast
              cd tests
              coverage combine
              coverage html
              coverage xml
              cd ..
              # We installed the package with pip, and coverage reports the full absolute path.
              # We cut to derex/runner/etc/etc
              DEREX_RUNNER_PATH=`cd tests;python -c "from pathlib import Path; import derex.runner;print(Path(derex.runner.__file__).parent.parent.parent)"`
              echo Replacing ${DEREX_RUNNER_PATH} in tests/htmlcov/*.html
              sudo npm config set cache $(Pipeline.Workspace)/.cache/npm --global
              npm install juice
              # Azure pipelines strips style sheets but leaves styles in place.
              # juice can embed the styles in the HTML for us and present a much better
              # view in the coverage results tab.
              for filename in tests/htmlcov/*.html; do $(npm bin)/juice $filename $filename; done
              echo "##vso[codecoverage.publish codecoveragetool=Cobertura;summaryfile=${PWD}/tests/coverage.xml;reportdirectory=${PWD}/tests/htmlcov;]"
            displayName: Fix coverage result and publish it
            condition: succeededOrFailed()

      - job: TestJuniperMinimalProject
        timeoutInMinutes: 40
        pool:
          vmImage: $(UBUNTU_VERSION)
        variables:
          CURL: curl --retry-connrefused --connect-timeout 30 --retry 5 --retry-delay 5 -f
        steps:
          - template: prepare.yml
            parameters:
              AS_PYTHON_PACKAGE: True
          - template: load_images.yml
            parameters:
              DOCKER_IMAGES_SLUG: juniper
          - template: test_project.yml
            parameters:
              OPENEDX_RELEASE: juniper
              PROJECT_TYPE: minimal

      - job: TestJuniperCompleteProject
        timeoutInMinutes: 60
        pool:
          vmImage: $(UBUNTU_VERSION)
        variables:
          CURL: curl --retry-connrefused --connect-timeout 30 --retry 5 --retry-delay 5 -f
        steps:
          - template: prepare.yml
            parameters:
              AS_PYTHON_PACKAGE: True
          - template: load_images.yml
            parameters:
              DOCKER_IMAGES_SLUG: juniper
          - template: test_project.yml
            parameters:
              OPENEDX_RELEASE: juniper
              PROJECT_TYPE: complete

      - job: TestKoaMinimalProject
        timeoutInMinutes: 40
        pool:
          vmImage: $(UBUNTU_VERSION)
        variables:
          CURL: curl --retry-connrefused --connect-timeout 30 --retry 5 --retry-delay 5 -f
        steps:
          - template: prepare.yml
            parameters:
              AS_PYTHON_PACKAGE: True
          - template: load_images.yml
            parameters:
              DOCKER_IMAGES_SLUG: koa
          - template: test_project.yml
            parameters:
              OPENEDX_RELEASE: koa
              PROJECT_TYPE: minimal

      - job: TestKoaCompleteProject
        timeoutInMinutes: 60
        pool:
          vmImage: $(UBUNTU_VERSION)
        variables:
          CURL: curl --retry-connrefused --connect-timeout 30 --retry 5 --retry-delay 5 -f
        steps:
          - template: prepare.yml
            parameters:
              AS_PYTHON_PACKAGE: True
          - template: load_images.yml
            parameters:
              DOCKER_IMAGES_SLUG: koa
          - template: test_project.yml
            parameters:
              OPENEDX_RELEASE: koa
              PROJECT_TYPE: complete

      - job: TestLilacMinimalProject
        timeoutInMinutes: 40
        pool:
          vmImage: $(UBUNTU_VERSION)
        variables:
          CURL: curl --retry-connrefused --connect-timeout 30 --retry 5 --retry-delay 5 -f
        steps:
          - template: prepare.yml
            parameters:
              AS_PYTHON_PACKAGE: True
          - template: load_images.yml
            parameters:
              DOCKER_IMAGES_SLUG: lilac
          - template: test_project.yml
            parameters:
              OPENEDX_RELEASE: lilac
              PROJECT_TYPE: minimal

      - job: CheckDocs
        timeoutInMinutes: 5
        pool:
          vmImage: $(UBUNTU_VERSION)
        steps:
          - template: prepare.yml
          - script: make docs
            displayName: "Compile docs"

      - job: CheckPreCommit
        timeoutInMinutes: 5
        pool:
          vmImage: $(UBUNTU_VERSION)
        steps:
          - template: prepare.yml
          - script: pre-commit run -a
            displayName: "Check pre commit hooks"
