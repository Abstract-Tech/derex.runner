name: Build
on: [push]

env:
  CACHE_KEY_BASE: 22 # Increment this value to reset the images cache
  CACHE_KEY_FILES: $GITHUB_WORKSPACE/docker-definition/**/*
  CACHE_KEY_IMAGES: BASE_SEED=$CACHE_KEY_BASE | $CACHE_KEY_FILES
  IMAGE_CACHE_PATH: $GITHUB_WORKSPACE/image_cache
  SENTINEL_CACHE_PATH: $GITHUB_WORKSPACE/sentinel_cache

jobs:
  juniper:
    runs-on: ubuntu-latest
    timeout-minutes: 180
    env:
      DOCKER_IMAGES_SLUG: juniper
    steps:
      - uses: actions/checkout@v3

      - name: Docker images sentinel cache
        id: cache-sentinel
        uses: actions/cache@v3
        with:
          path: $(SENTINEL_CACHE_PATH)
          key: SENTINEL=1 | $(DOCKER_IMAGES_SLUG) | $(CACHE_KEY_IMAGES)

      - name: Docker images cache
        if: steps.cache-sentinel.outputs.cache-hit != 'true'
        uses: actions/cache@v3
        with:
          path: $IMAGE_CACHE_PATH
          key: BASE_SEED=$(CACHE_KEY_BASE) | $DOCKER_IMAGES_SLUG | $(CACHE_KEY_IMAGES)
          restore-keys: BASE_SEED=$(CACHE_KEY_BASE) | $DOCKER_IMAGES_SLUG

      - name: Load images
        if: steps.cache-sentinel.outputs.cache-hit != 'true'
        run: |
          [ -d $IMAGE_CACHE_PATH ] || exit 0
          ls -l $IMAGE_CACHE_PATH
          docker images
          set -euxo pipefail
          cat $IMAGE_CACHE_PATH/edx-$DOCKER_IMAGES_SLUG.tar.xz | unxz | docker load
          docker images

      - name: Set needs_build pipeline variable
        if: steps.cache-sentinel.outputs.cache-hit != 'true'
        run: echo "NEEDS_BUILD=true" >> $GITHUB_ENV

      - name: Remove Haskell compiler and cached apt archives to save disk space
        if: NEEDS_BUILD != 'true' && success()
        run: df -h; time sudo rm -rf /var/cache/apt/archives /opt/ghc; df -h

      - name: Prepare Transifex credentials
        run: |
          if [ "$TRANSIFEX_USERNAME" == '$(TRANSIFEX_USERNAME)' ] || [ "$TRANSIFEX_PASSWORD" == '$(TRANSIFEX_PASSWORD)' ]; then
                    echo "Transifex credentials unset. Building without translations."
                    exit 0
          fi
          printf '[https://www.transifex.com]\nhostname=https://www.transifex.com\nusername=%s\npassword=%s\n' "${TRANSIFEX_USERNAME}" "${TRANSIFEX_PASSWORD}" > $HOME/.transifexrc
          ls -l $HOME/.transifexrc
        env:
          TRANSIFEX_USERNAME: $(TRANSIFEX_USERNAME)
          TRANSIFEX_PASSWORD: $(TRANSIFEX_PASSWORD)

      - name:
  koa:
    runs-on: ubuntu-latest
    timeout-minutes: 180
    env:
      DOCKER_IMAGES_SLUG: koa
    steps:
      - uses: actions/checkout@v3

      - name: Docker images sentinel cache
        id: cache-sentinel
        uses: actions/cache@v3
        with:
          path: $(SENTINEL_CACHE_PATH)
          key: SENTINEL=1 | $(DOCKER_IMAGES_SLUG) | $(CACHE_KEY_IMAGES)

  lilac:
    runs-on: ubuntu-latest
    timeout-minutes: 180
    env:
      DOCKER_IMAGES_SLUG: lilac
    steps:
      - uses: actions/checkout@v3

      - name: Docker images sentinel cache
        id: cache-sentinel
        uses: actions/cache@v3
        with:
          path: $(SENTINEL_CACHE_PATH)
          key: SENTINEL=1 | $(DOCKER_IMAGES_SLUG) | $(CACHE_KEY_IMAGES)
