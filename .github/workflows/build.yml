name: Build
on: push

env:
  CACHE_KEY_BASE: 22 # Increment this value to reset the images cache
  CACHE_KEY_FILES: ${{ github.workspace }}/docker-definition
  CACHE_KEY_IMAGES: BASE_SEED=$CACHE_KEY_BASE | $CACHE_KEY_FILES
  IMAGE_CACHE_PATH: ${{ github.workspace }}/image_cache
  SENTINEL_CACHE_PATH: ${{ github.workspace }}/sentinel_cache

jobs:
  juniper:
    runs-on: ubuntu-latest
    timeout-minutes: 180
    env:
      DOCKER_IMAGES_SLUG: juniper
    steps:
      - uses: actions/checkout@v3

      - name: Docker images sentinel cache
        id: cache-sentinel
        uses: actions/cache@v3
        with:
          path: $SENTINEL_CACHE_PATH
          key: SENTINEL=1 | $DOCKER_IMAGES_SLUG | $CACHE_KEY_IMAGES

      - name: Docker images cache
        if: steps.cache-sentinel.outputs.cache-hit != 'true'
        uses: actions/cache@v3
        with:
          path: $IMAGE_CACHE_PATH
          key: BASE_SEED=$CACHE_KEY_BASE | $DOCKER_IMAGES_SLUG | $CACHE_KEY_IMAGES
          restore-keys: BASE_SEED=$CACHE_KEY_BASE | $DOCKER_IMAGES_SLUG

      - name: Load images
        if: steps.cache-sentinel.outputs.cache-hit != 'true'
        run: |
          [ -d $IMAGE_CACHE_PATH ] || exit 0
          ls -l $IMAGE_CACHE_PATH
          docker images
          set -euxo pipefail
          cat $IMAGE_CACHE_PATH/edx-$DOCKER_IMAGES_SLUG.tar.xz | unxz | docker load
          docker images

      - name: Set needs_build pipeline variable
        if: steps.cache-sentinel.outputs.cache-hit != 'true'
        run: echo "NEEDS_BUILD=true" >> $GITHUB_ENV

      - name: Remove Haskell compiler and cached apt archives to save disk space
        if: env.NEEDS_BUILD != 'false'
        run: df -h; time sudo rm -rf /var/cache/apt/archives /opt/ghc; df -h

      - name: Prepare Transifex credentials
        if: env.NEEDS_BUILD != 'false'
        run: |
          if [ "$TRANSIFEX_USERNAME" == '$(TRANSIFEX_USERNAME)' ] || [ "$TRANSIFEX_PASSWORD" == '$(TRANSIFEX_PASSWORD)' ]; then
                    echo "Transifex credentials unset. Building without translations."
                    exit 0
          fi
          printf '[https://www.transifex.com]\nhostname=https://www.transifex.com\nusername=%s\npassword=%s\n' "${TRANSIFEX_USERNAME}" "${TRANSIFEX_PASSWORD}" > $HOME/.transifexrc
          ls -l $GITHUB_WORKSPACE/.transifexrc
        env:
          TRANSIFEX_USERNAME: $(TRANSIFEX_USERNAME)
          TRANSIFEX_PASSWORD: $(TRANSIFEX_PASSWORD)

      - name: Setup docker images cache
        if: env.NEEDS_BUILD != 'false'
        run: |
          images=$(docker images|grep -v '<none>'|grep derex|awk '{print $1 ":" $2}')
          CACHE_FROM_OPTS=""
          if [ -d $IMAGE_CACHE_PATH ]; then
            echo "Will use cached layers from images $images"
            for image in $images; do
            CACHE_FROM_OPTS="${CACHE_FROM_OPTS} --cache-from=$image"
            done
          else
            mkdir $IMAGE_CACHE_PATH
          fi
          echo "CACHE_FROM_OPTS=$CACHE_FROM_OPTS" >> $GITHUB_ENV
          mkdir $SENTINEL_CACHE_PATH
          cp -r $CACHE_KEY_FILES $SENTINEL_CACHE_PATH
          # We save the sha of the repo that built this image, so that we can push
          # it only in a build of the same commit, after tests are passed
          git rev-parse --verify HEAD > $SENTINEL_CACHE_PATH/built_version

      - name: Replace default docker with upsream docker and create build context
        if: env.NEEDS_BUILD != 'false'
        run: |
          set -ex
          sudo apt-get remove moby-cli -y
          curl -fsSL https://get.docker.com |sudo bash
          sudo mv /etc/docker/daemon.json /etc/docker/daemon.json.orig
          sudo cat /etc/docker/daemon.json.orig|jq '. + {experimental: true}' |sudo tee /etc/docker/daemon.json
          sudo systemctl restart docker.service
          docker version
          docker buildx create --use
          docker images
          sudo apt-get install pixz -y

      - uses: actions/setup-python@v4
        with:
          python-version: "3.8"

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: $GITHUB_WORKSPACE/.cache/pip
          key: pipcache | requirements_dev.txt
          restore-keys: pipcache

      - name: Install derex.runner
        if: env.NEEDS_BUILD != 'false'
        run: |
          pip3 install --cache-dir $GITHUB_WORKSPACE/.cache/pip -U pip setuptools
          pip3 install --cache-dir $GITHUB_WORKSPACE/.cache/pip -r requirements_dev.txt -e .

      - name: Build nostatic image
        if: env.NEEDS_BUILD != 'false'
        run: derex build openedx --docker-opts "${CACHE_FROM_OPTS} --cache-to=type=inline -o type=docker" --target=nostatic $DOCKER_IMAGES_SLUG

      - name: Build dev image
        if: env.NEEDS_BUILD != 'false'
        run: derex build openedx --docker-opts "--cache-to=type=inline -o type=docker" --target=dev $DOCKER_IMAGES_SLUG

      - name: Check translations
        if: env.NEEDS_BUILD != 'false'
        run: |
          docker images
          derex build openedx --docker-opts "${CACHE_FROM_OPTS} --output type=docker,name={docker_image_prefix}-{target}" --target=translations $DOCKER_IMAGES_SLUG
          docker images
          docker run --rm derex/openedx-$DOCKER_IMAGES_SLUG-translations:$(grep __version__ derex/runner/__init__.py |sed 's/[^"]*"//;s/"//') sh -c "i18n_tool validate || (find conf|grep prob; find conf|grep prob|xargs cat; false)" || echo "Problems with translations found"

      - name: Save images
        if: env.NEEDS_BUILD != 'false'
        run: |
          set -euxo pipefail;
          docker save \
          $(derex build openedx --only-print-image-name -t nostatic $DOCKER_IMAGES_SLUG) \
          $(derex build openedx --only-print-image-name -t dev $DOCKER_IMAGES_SLUG) \
          | pixz -0 > $IMAGE_CACHE_PATH/edx-$DOCKER_IMAGES_SLUG.tar.xz

  koa:
    runs-on: ubuntu-latest
    timeout-minutes: 180
    env:
      DOCKER_IMAGES_SLUG: koa
    steps:
      - uses: actions/checkout@v3

      - name: Docker images sentinel cache
        id: cache-sentinel
        uses: actions/cache@v3
        with:
          path: $(SENTINEL_CACHE_PATH)
          key: SENTINEL=1 | $DOCKER_IMAGES_SLUG | $CACHE_KEY_IMAGES

  lilac:
    runs-on: ubuntu-latest
    timeout-minutes: 180
    env:
      DOCKER_IMAGES_SLUG: lilac
    steps:
      - uses: actions/checkout@v3

      - name: Docker images sentinel cache
        id: cache-sentinel
        uses: actions/cache@v3
        with:
          path: $(SENTINEL_CACHE_PATH)
          key: SENTINEL=1 | $DOCKER_IMAGES_SLUG | $CACHE_KEY_IMAGES

  on-success:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - run: echo 'Workflow passed'
  on-failure:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    steps:
      - run: echo 'Workflow failed'