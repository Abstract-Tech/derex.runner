name: Build
on: [push]

env:
  CACHE_KEY_BASE: 22 # Increment this value to reset the images cache
  CACHE_KEY_FILES: $GITHUB_WORKSPACE/docker-definition/**/*
  CACHE_KEY_IMAGES: BASE_SEED=$CACHE_KEY_BASE | $CACHE_KEY_FILES
  IMAGE_CACHE_PATH: $GITHUB_WORKSPACE/image_cache
  SENTINEL_CACHE_PATH: $GITHUB_WORKSPACE/sentinel_cache

jobs:
  juniper:
    runs-on: ubuntu-latest
    timeout-minutes: 180
    env:
      DOCKER_IMAGES_SLUG: juniper
    steps:
      - uses: actions/checkout@v3

      - name: Docker images sentinel cache
        id: cache-juniper
        uses: actions/cache@v3
        with:
          path: $(SENTINEL_CACHE_PATH)
          key: SENTINEL=1 | $(DOCKER_IMAGES_SLUG) | $(CACHE_KEY_IMAGES)

      - name: Docker images cache
        if: steps.cache-juniper.outputs.cache-hit != 'true'
        uses: actions/cache@v3
        with:
          path: $(IMAGE_CACHE_PATH)
          key: BASE_SEED=$(CACHE_KEY_BASE) | juniper | $(CACHE_KEY_IMAGES)
          restore-keys: BASE_SEED=$(CACHE_KEY_BASE) | juniper

      - name: Load juniper images
        if: steps.cache-juniper.outputs.cache-hit != 'true'
        run: |
          ls -l $(IMAGE_CACHE_PATH)
          docker images
          set -euxo pipefail
          cat $(IMAGE_CACHE_PATH)/edx-juniper.tar.xz | unxz | docker load
          docker images

  koa:
    runs-on: ubuntu-latest
    timeout-minutes: 180
    env:
      DOCKER_IMAGES_SLUG: koa
    steps:
      - uses: actions/checkout@v3

      - name: Resolve Sentinel cache
        id: cache-koa
        uses: actions/cache@v3
        with:
          path: $(SENTINEL_CACHE_PATH)
          key: SENTINEL=1 | $(DOCKER_IMAGES_SLUG) | $(CACHE_KEY_IMAGES)

  lilac:
    runs-on: ubuntu-latest
    timeout-minutes: 180
    env:
      DOCKER_IMAGES_SLUG: lilac
    steps:
      - uses: actions/checkout@v3

      - name: Resolve Sentinel cache
        id: cache-lilac
        uses: actions/cache@v3
        with:
          path: $(SENTINEL_CACHE_PATH)
          key: SENTINEL=1 | $(DOCKER_IMAGES_SLUG) | $(CACHE_KEY_IMAGES)
