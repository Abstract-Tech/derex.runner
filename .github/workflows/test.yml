name: Build
on: push

env:
  CACHE_KEY_BASE: 22 # Increment this value to reset the images cache
  CACHE_KEY_FILES: ${{ github.workspace }}/docker-definition
  CACHE_KEY_IMAGES: BASE_SEED=$CACHE_KEY_BASE | $CACHE_KEY_FILES
  IMAGE_CACHE_PATH: ${{ github.workspace }}/image_cache
  SENTINEL_CACHE_PATH: ${{ github.workspace }}/sentinel_cache
  PYTEST_ADDOPTS: --cov=derex --cov-report xml --cov-report html --cov-report term --cov-report term-missing --cov-branch --black
  CURL: curl --retry-connrefused --connect-timeout 30 --retry 5 --retry-delay 5 -f

jobs:
  CheckDocsAndPreCommit:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: "3.8"

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/.cache/pip
          key: pipcache | requirements_dev.txt
          restore-keys: pipcache

      - name: Install derex.runner
        if: env.NEEDS_BUILD != 'false'
        run: |
          pip3 install --cache-dir ${{ github.workspace }}/.cache/pip -U pip setuptools
          pip3 install --cache-dir ${{ github.workspace }}/.cache/pip -r requirements_dev.txt -e .

      - name: Compile docs
        run: make docs

      - name: Check pre-commit hooks
        run: pre-commit run -a

  BuildBinaries:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [CheckDocsAndPreCommit]
    strategy:
      fail-fast: false
      matrix:
        OPENEDX_RELEASE: [juniper, koa, lilac]

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: "3.8"

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/.cache/pip
          key: pipcache | requirements_dev.txt
          restore-keys: pipcache

      - name: Install derex.runner
        if: env.NEEDS_BUILD != 'false'
        run: |
          pip3 install --cache-dir ${{ github.workspace }}/.cache/pip -U pip setuptools
          pip3 install --cache-dir ${{ github.workspace }}/.cache/pip -r requirements_dev.txt -e .

      - name: Build linux binary with pyinstaller
        run: |
          pip install pyinstaller
          make executable

      - name: Test pyinstaller created linux binary
        run: |
          set -ex
          ./bundle/dist/derex
          ./bundle/dist/ddc-services ps
          cd examples/${{ matrix.OPENEDX_RELEASE }}/minimal
          ../../../bundle/dist/ddc-project config

      - uses: actions/upload-artifact@v2.2.4
        with:
          name: LinuxBinary
          path: ./bundle/dist/
        continue-on-error: true

      - name: Build macOS binary with pyinstaller
        run: |
          pip install pyinstaller scrypt
          # The Openssl version on MacOS 10.14 does not support scrypt
          # so we pip install it and leave a trace to pyinstaller to pick it up
          echo -e  "\nimport scrypt" >> bundle/executable.py
          make executable

      - name: Test pyinstaller created macOS binary
        run: |
          set -ex
          ./bundle/dist/derex --help
          ./bundle/dist/ddc-services --help
          cd examples/${{ matrix.OPENEDX_RELEASE }}/minimal
          ../../../bundle/dist/ddc-project config

      - uses: actions/upload-artifact@v2.2.4
        with:
          name: MacOSBinary
          path: ./bundle/dist/
        continue-on-error: true

  RunPytests:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [CheckDocsAndPreCommit]
    strategy:
      fail-fast: false
      matrix:
        OPENEDX_RELEASE: [juniper, koa, lilac]

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: "3.8"

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/.cache/pip
          key: pipcache | requirements_dev.txt
          restore-keys: pipcache

      - name: Install derex.runner
        if: env.NEEDS_BUILD != 'false'
        run: |
          pip3 install --cache-dir ${{ github.workspace }}/.cache/pip -U pip setuptools
          pip3 install --cache-dir ${{ github.workspace }}/.cache/pip -r requirements_dev.txt -e .

      - name: Run python tests
        run: |
          set -ex
          set -o pipefail
          pip3 --cache-dir ${{ github.workspace }}/.cache/pip install scrypt
          cd tests
          pytest -m "not slowtest" | grep -v codecoveragetool=Cobertura

      - uses: actions/upload-artifact@v2.2.4
        with:
          name: fasttests_coverage
          path: ${{ github.workspace }}/tests/.coverage
        continue-on-error: true

  RunSlowPytests:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [CheckDocsAndPreCommit]
    strategy:
      fail-fast: false
      matrix:
        OPENEDX_RELEASE: [juniper, koa, lilac]

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: "3.8"

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/.cache/pip
          key: pipcache | requirements_dev.txt
          restore-keys: pipcache

      - name: Install derex.runner
        if: env.NEEDS_BUILD != 'false'
        run: |
          pip3 install --cache-dir ${{ github.workspace }}/.cache/pip -U pip setuptools
          pip3 install --cache-dir ${{ github.workspace }}/.cache/pip -r requirements_dev.txt -e .

      - name: Docker images cache
        if: steps.cache-sentinel.outputs.cache-hit != 'true'
        uses: actions/cache@v3
        with:
          path: $IMAGE_CACHE_PATH
          key: BASE_SEED=$CACHE_KEY_BASE | ${{ matrix.OPENEDX_RELEASE }} | $CACHE_KEY_IMAGES
          restore-keys: BASE_SEED=$CACHE_KEY_BASE | ${{ matrix.OPENEDX_RELEASE }}

      - name: Load images
        if: steps.cache-sentinel.outputs.cache-hit != 'true'
        run: |
          [ -d $IMAGE_CACHE_PATH ] || exit 0
          ls -l $IMAGE_CACHE_PATH
          docker images
          set -euxo pipefail
          cat $IMAGE_CACHE_PATH/edx-${{ matrix.OPENEDX_RELEASE }}.tar.xz | unxz | docker load
          docker images

      - name: Provision services
        run: |
          ddc-services config
          ddc-services pull
          set -ex
          export DEREX_ADMIN_SERVICES=False
          ddc-services up -d
          sleep 15
          derex reset-mailslurper

      - name: Run python tests
        run: |
          set -ex
          set -o pipefail
          cd tests
          pytest -m "slowtest" | grep -v codecoveragetool=Cobertura

      - uses: actions/upload-artifact@v2.2.4
        with:
          name: slowtests_coverage
          path: ${{ github.workspace }}/tests/.coverage
        continue-on-error: true

  TestProject:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [RunPytests, RunSlowPytests]
    strategy:
      fail-fast: false
      matrix:
        OPENEDX_RELEASE: [juniper, koa, lilac]
        PROJECT_TYPE: [minimal, complete]
    env:
      PROJECT_TYPE: ${{ matrix.PROJECT_TYPE }}
      PROJECT_PATH: examples/${{ matrix.OPENEDX_RELEASE }}/${{ matrix.PROJECT_TYPE }}
      PROJECT_NAME: ${{ matrix.OPENEDX_RELEASE }}-${{ matrix.PROJECT_TYPE }}

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: "3.8"

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/.cache/pip
          key: pipcache | requirements_dev.txt
          restore-keys: pipcache

      - name: Install derex.runner as python package
        if: env.NEEDS_BUILD != 'false'
        run: |
          pip3 install --cache-dir ${{ github.workspace }}/.cache/pip -U pip setuptools
          pip3 install --cache-dir ${{ github.workspace }}/.cache/pip .

      - name: Docker images cache
        if: steps.cache-sentinel.outputs.cache-hit != 'true'
        uses: actions/cache@v3
        with:
          path: $IMAGE_CACHE_PATH
          key: BASE_SEED=$CACHE_KEY_BASE | ${{ matrix.OPENEDX_RELEASE }} | $CACHE_KEY_IMAGES
          restore-keys: BASE_SEED=$CACHE_KEY_BASE | ${{ matrix.OPENEDX_RELEASE }}

      - name: Load images
        if: steps.cache-sentinel.outputs.cache-hit != 'true'
        run: |
          [ -d $IMAGE_CACHE_PATH ] || exit 0
          ls -l $IMAGE_CACHE_PATH
          docker images
          set -euxo pipefail
          cat $IMAGE_CACHE_PATH/edx-${{ matrix.OPENEDX_RELEASE }}.tar.xz | unxz | docker load
          docker images

      - name: Provision services
        run: |
          ddc-services config
          ddc-services pull
          set -ex
          export DEREX_ADMIN_SERVICES=False
          ddc-services up -d
          sleep 15
          derex reset-mailslurper

      - name: Provision project
        run: cd $PROJECT_PATH; ddc-project config

      - name: Build project final image
        if: ${{ matrix.PROJECT_TYPE == 'complete' }}
        run: cd $PROJECT_PATH && derex build project

      - name: Prime Mysql DB
        run: |
          set -ex
          cd $PROJECT_PATH
          derex mysql reset --force

      - name: Prime MinIO bucket
        run: |
          set -ex
          cd $PROJECT_PATH
          derex minio-update-key
          derex create-bucket --no-tty

      - name: Prime Rabbitmq
        run: |
          set -ex
          cd cd $PROJECT_PATH
          derex reset-rabbitmq

      - name: Add hosts to /etc/hosts
        run: echo 127.0.0.1 localhost studio.$PROJECT_NAME.localhost $PROJECT_NAME.localhost | sudo tee -a /etc/hosts

      - name: Show LMS/CMS logs
        run: cd $PROJECT_PATH; ddc-project logs lms cms

      - name: Set production settings
        if: ${{ matrix.PROJECT_TYPE == 'complete' }}
        run: cd $PROJECT_PATH && derex settings production

      - name: Compile theme
        if: ${{ matrix.PROJECT_TYPE == 'complete' }}
        run: cd $PROJECT_PATH && derex compile-theme

      - name: Test image with dive
        run: |
          set -ex
          cd $PROJECT_PATH
          docker images

          # This should not be needed, but for some reason Azure does not tag the image
          docker tag $(docker images -q|head -n1) $PROJECT_NAME/openedx-themes
          docker images

          echo Installing dive
          wget -q https://github.com/wagoodman/dive/releases/download/v0.9.2/dive_0.9.2_linux_amd64.deb
          DEBIAN_FRONTEND=noninteractive sudo -E apt-get install -y ./dive_0.9.2_linux_amd64.deb

          echo Analyzing image
          dive --ci $PROJECT_NAME/openedx-themes
          #echo "Skipping image analysis"

  CombineCoverage:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [RunPytests, RunSlowPytests]

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: "3.8"

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/.cache/pip
          key: pipcache | requirements_dev.txt
          restore-keys: pipcache

      - name: Install derex.runner
        if: env.NEEDS_BUILD != 'false'
        run: |
          pip3 install --cache-dir ${{ github.workspace }}/.cache/pip -U pip setuptools
          pip3 install --cache-dir ${{ github.workspace }}/.cache/pip -r requirements_dev.txt -e .

      - uses: actions/download-artifact@v3
        with:
          name: fasttests_coverage

      - uses: actions/download-artifact@v3
        with:
          name: slowtests_coverage

      - name: Cache npm packages
        uses: actions/cache@v3
        with:
          path: $GITHUB_WORKSPACE/.cache/npm
          key: npmcache2

      - name: Fix coverage result and publish it
        if: always()
        run: |
          set -ex
          cp ${{ github.workspace }}/.coverage tests/.coverage.slow
          cp ${{ github.workspace }}/.coverage tests/.coverage.fast
          cd tests
          coverage combine
          coverage html
          coverage xml
          cd ..
          # We installed the package with pip, and coverage reports the full absolute path.
          # We cut to derex/runner/etc/etc
          DEREX_RUNNER_PATH=`cd tests;python -c "from pathlib import Path; import derex.runner;print(Path(derex.runner.__file__).parent.parent.parent)"`
          echo Replacing ${DEREX_RUNNER_PATH} in tests/htmlcov/*.html
          sudo npm config set cache ${{ github.workspace }}/.cache/npm --global
          npm install juice
          # Azure pipelines strips style sheets but leaves styles in place.
          # juice can embed the styles in the HTML for us and present a much better
          # view in the coverage results tab.
          for filename in tests/htmlcov/*.html; do $(npm bin)/juice $filename $filename; done
          cp tests/coverage.xml ${{ github.workspace }}

      - name: Code coverage summary report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage.xml
